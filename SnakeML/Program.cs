// See https://aka.ms/new-console-template for more information
using SnakeML.GameEngine;
using SnakeML.NeuralNet;

Console.CursorVisible = false;

//PlayMultipleGames();
var population = new Population(2000);

population.Games.Take(1000).ToList().ForEach(g => g.Load(GetBrain()));

PlayPopulation(population);

void PlayPopulation(Population population)
{
    //var games = population.Games.Take(10).Select(g => g as Game).ToList();
    //DrawMaps(games);
    var advancedSnakes = new List<Game>();
    while (true)
    {
        population.TickAll();
        Console.SetCursorPosition(0, 0);
        if (population.Games.Any(g => g.Snake.Length > 5))
        {
            advancedSnakes.AddRange(population.Games.Where(g => g.Snake.Alive && g.Snake.Length > 5 && !advancedSnakes.Contains(g)));
            if(advancedSnakes.Take(10).All(g => !g.Snake.Alive))
            {
                foreach (var snakeToBeRemoved in advancedSnakes.Where(g => !g.Snake.Alive).ToList())
                    advancedSnakes.Remove(snakeToBeRemoved);
            }
            DrawMaps(advancedSnakes);
        }
        //Thread.Sleep(200);
        if (population.Games.All(g => !g.Snake.Alive))
        {
            Console.SetCursorPosition(0, 30);
            Console.WriteLine(population.BestLength);
            Console.WriteLine(population.BestFitness);
            Console.WriteLine(population.Generation);
            population.CalculateFitness();
            string bestGame = population.Games.MaxBy(g => g.Fitness)?.Save();
            advancedSnakes.Clear();
            population.NaturalSelection();
            // PlayPopulation(population);

        }


    }

    //    var game = new MLGame();

    //    DrawMap(game);

    //    try
    //    {
    //        Console.WriteLine();

    //        while (true)
    //        {
    //            game.Decide();
    //            game.Tick();
    //            Console.SetCursorPosition(0, 0);
    //            DrawMap(game);
    //            Thread.Sleep(200);
    //        }
    //    }
    //    catch (GameOverException)
    //    {
    //        Console.Clear();
    //        AutoPlayGame();
    //    }

    //    return game;
}

string GetBrain()
{
    return @"0.6705877009377588;0.12234600312472388;1;0.35543185239893615;-0.4971813484562917;0.388104884933681;0.6372867261315867;1;0.43320768437836565;0.18712220643414534;0.7812529081760105;-0.8561871685797071;0.7610431457575595;-0.23820500787121546;-0.5635110120062836;0.04537477468055129;0.6546049768183544;-0.846023319623137;1;-0.7035280054288184;0.3150462453242069;-0.9384025678237964;0.989402238130332;1;-0.49911829426031473;0.7943899306172024;-0.6601518884362272;0.8372820805549097;-0.0897978942713682;-0.6072977076324544;-0.6124391305231438;0.2029742436924178;-0.9080689387423486;0.36565830308903746;-0.49500484323908966;-0.37885844474011976;1;1;-0.5000312576941055;0.19510331554256544;-0.8416154461971477;0.022264771379864712;-0.327476702905215;0.35653132341722094;0.3577534279936674;-0.4025186362907769;-0.055058971449069904;1;1;-0.5722020229348281;-0.04175955278746546;1;-0.45782855326912686;-0.26381379582152986;-0.7006471965559931;1;1;-0.019121296448502578;0.8779182024090437;-0.930692940500619;0.3668061540358145;-0.5272433227584505;-0.8012575655079934;-0.5239708261432798;1;0.14525423133618576;0.1640925188880642;0.3088765005829439;-0.612728668906072;1;-0.7670718039665461;-0.7543428096439029;0.9771444281662973;0.7165576415277581;-0.2054292931122954;-0.5818965637462887;0.3091563093431844;0.4854757442807447;0.8250601823254682;0.0237435115357727;1;-0.42681135879502374;1;0.9172197245857487;-0.048992782048352224;-0.013034234241700027;0.7752529021769266;0.4888295837457659;0.7946248431564737;-0.47046594773144723;1;-0.7113082636493073;-0.39582652615708325;1;-0.5375207290927047;-0.5785042376451472;1;-0.1075507663881119;0.6328412837558512;0.3601665535746059;0.170091138398762;0.5790672961869439;0.5223968525685525;1;0.32520685474067657;0.09479977280813356;-0.3209181852319365;-0.7605316220989542;0.7351345103083893;0.669437154006274;-0.3494973412367963;-0.8801812847708343;-0.3208187299613048;1;-0.22899067548012964;-0.2998641686772079;1;-0.3285396166028145;0.12592311113389476;0.18113388552202458;-0.4437420639857379;-0.23216914759371732;-0.2580369539444174;-0.48955840159501784;0.24545755971493022;1;0.05850637878595566;-0.6397375075373541;-0.6785630627277972;-0.5548247738783432;0.8711347164483685;-0.17456732105257555;0.6757086336086178;0.5785917423878324;0.28550841392772486;-0.26000363024098094;0.7567137276529261;-0.3080000991271985;-0.6691502341619735;1;0.020878210227943894;0.6965853773884292;-0.38425507518390045;0.4827971123480035;-0.444557544200346;1;-0.20506809559797934;-0.24799444458843456;1;-0.9658999043353178;1;0.15026371741706712;-0.855183130514312;0.03959642895134641;-0.6700328326079936;1;0.9798508035350431;-0.7044143203816915;0.4674340753682522;0.6443215143293555;-0.03411408331943999;0.31461219882521907;-0.6547658747148837;1;-0.5041051036154911;1;-0.7924356357166189;0.5073195225545306;-0.6540994560248277;0.3588654170541974;-0.14368477346486674;-0.3436251588063697;1;0.17381449394097848;1;1;-0.2482683292229657;-0.8656804561012386;0.8579709704130545;-0.6775553247364472;0.5175738609988059;0.07795136410697667;0.7436203677632527;-0.5499029825137833;1;1;0.7710047365203914;0.12394908911764646;0.9444409748146183;0.42395374439621136;-0.2746540399362811;-0.06402250489266037;0.7861082487316129;0.18523283225171294;0.6837547019563575;-0.913284009534701;0.4131223299355815;0.509155675165132;0.21800763208814322;-0.7216669828663096;-0.11329065005265582;0.40442185851668544;-0.6209647046873765;-0.2950909126421195;-0.26789057642565206;-0.3459035583881127;1;0.011800062778626552;-0.9896190873217849;-0.6375497532565257;-0.6682952596686846;-0.9595122665422664;-0.4745977929769869;0.5741782239838733;-0.321723121443902;-0.8794272204307299;0.30071216333267237;-0.041487761205609486;0.5900977739195772;-0.5910762589239684;0.9349384588371046;-0.04386173039999819;-0.13745847710928039;0.20370207664480078;-0.5847768312060664;-0.14080484619002043;0.17629452942247026;0.7588726435955702;-0.4770918211128603;1;1;1;0.7943604163973557;-0.7451329229551802;-0.45577489768744583;0.5702577138899776;1;0.47279536985123616;0.4951770955346191;-0.0007952292722186449;0.7239725170203788;0.6350107501224389;0.5946267500558069;-0.12464865476951537;-0.6385843189746112;1;1;0.5290734883079209;0.5368106757032534;-0.21099341779089342;0.6815322687414804;0.4049508249799294;-0.9776190216930774;-0.5897288539439893;-0.23444469710219717;1;0.9047479580444036;-0.18364834074327696;-0.7908810581160457;0.02512761516669415;1;0.354061232244826;0.1944264025055238;-0.30777431120270804;0.9085472028060071;-0.27727300463487303;1;0.8881203791601546;0.6321399260424752;0.04858599546010001;-0.5677496884793374;-0.9092453544010033;-0.3771575414807129;0.9811169738440433;0.36186746550983284;-0.20305899417320172;1;-0.12956694170251626;0.6080841098388148;-0.1288480000266936;1;-0.49611892803874547;0.8660860642745716;0.6323776610628642;1;-0.14922871285560158;-0.6155488340165052;0.6087235136255498;1;0.707580677190035;0.32765454057879895;0.3308471622601008;-0.2138020879401752;0.6362662952914733;-0.39914445883739713;0.6908675921755336;-0.9545917206188113;0.39847622330733046;1;-0.00547282475779709;1;-0.08546783230102517;-0.9437003493142562;1;0.4293748514254012;0.13342626787046696;-0.6015671950749986;0.5505279719457579;0.450277259119892;-0.21989368431002232;0.056915402792125924;0.8195785002345519;0.6323720270556832;0.059231721451535435;-0.7156899261254457;1;-0.8990713167847479;-0.5448239093034211;-0.9413872241887038;0.7175241805661541;0.6613777033760924;1;-0.30070009419688337;0.5608703209485246;-0.6308434311680071;0.7255291291056964;-0.1836544970045555;0.5293606970706819;-0.6003911726230562;-0.18843688020736216;0.7452932078650361;0.6485741285269062;0.23148944392671789;0.12466476226910639;0.27502923774173116;0.9071468744506341;0.26262340380767957;0.3573267330175589;0.7633407744081253;-0.43576010355820793;0.023746447265423187;-0.8274259033692455;0.5043145877970885;0.37419211807497255;0.908619959866674;1;0.04847596548901345;0.3244952002078554;0.8126559877189115;-0.7450904728479166;-0.24454719698204297;1;-0.8563000102870593;0.8163703124461525;-0.8871649709106035;-0.4113034269735292;-0.49117430551051;0.7952973081293275;-0.2818440194550631;-0.6667895044090137;-0.9644769331021432;-0.8282089429926245;-0.4336330813421725;0.6723312539946609;-0.7500322828078911;0.886201538622966;-0.5157337927077619;1;0.06773583460584298;-0.9558354141419372;0.8950271127914766;1;0.6496692960059942;0.516642519188993;-0.8964879494753586;0.7263202534114424;1;-0.12969459188895094;1;-0.43599379819124473;1;1;1;-0.1345960705635143;0.2772867639439731;0.1906774067679926;0.6484601100322578;-0.2879625457615096;-0.9252821935712721;-0.6219984995842167;0.047241493638804366;-0.4133309376651879;0.2219289858841884;-0.17759445572854204;0.7717873179184929;0.8855423297977811;-0.2822995187428514;0.10719952937134924;0.4636373509325513;-0.9488844504317329;-0.5903976338470438;-0.6136772406599242;-0.3684566912380147;0.048715326727491126;0.11870670366762082;0.5093819519246752;-0.33978296604244873;-0.03573769236552815;-0.7431526261887598;0.4614775870415284;1;1;-0.8641353559465095;-0.7211465647984427;0.6617128520654652;0.06065259329410155;0.08622256589243249;-0.500707482914603;1;0.4012586824328954;0.4230414060544745;-0.5948146985667144;0.6277312141283156;0.24914275884259962;-0.700479834254953;1;-0.4056259735857617;0.45506945777741903;-0.970002032379601;-0.6931827430831499;-0.9002024832761537;-0.8243897663247333;-0.19100289386904534;1;0.2567906622272613;1;0.5440653031987057;0.26230860773681797;1;0.7869238010660811;-0.3025654065817476;0.8186662433785918;1;-0.8950634781035591;-0.6104654565962726;-0.5617922439668537;0.6925461577517114;0.7411013319283857;0.0641583515365236;0.47514454660092986;#
-0.3468823263111449;0.8272130538992037;0.8431157841555577;-0.6363709130279123;-0.8511534903302593;0.6122157990226647;0.9800663580255207;0.5581612997626939;-0.08725719309355862;-0.5528428385709303;1;0.14185747139615001;-0.4046364491364498;1;-0.5009659644530675;-0.08051039963674178;0.2689243327426307;0.37805673199582235;0.32352086519872647;0.654807694749908;-0.1422012316837593;1;-0.10615912890225454;0.6971195499897218;1;0.6112788966034988;-0.5118870568940417;-0.21276668864692017;0.8615065655888396;1;-0.34713357822714275;-0.6109205112380736;-0.22572950026484184;0.5347294697775136;0.0005989977328202389;0.33390775905365566;0.31763655616360187;-0.09959466365637804;0.7312559163459109;0.4930290005041169;-0.41427808100974306;-0.5801979586320689;-0.04271745657410153;0.7340679369876;-0.2808699516499207;0.8604322682232968;-0.944058102159109;-0.110760598138268;0.7664309204012649;0.4050032019603427;1;0.8843559086169297;-0.7011020495352973;-0.5490416168704471;-0.9042187779597688;0.41741736609033153;-0.4567325546078538;-0.6790203061845597;-0.21822664187646712;0.02561352227229241;-0.7571659357350633;0.10026025255316262;0.5356871539677786;0.43543130735900526;-0.18287480571886627;-0.9803518655805614;0.7732773208818928;0.21200864254583918;-0.2375932616531775;-0.22145654856406471;0.8176804879599211;0.9573128673051217;0.8488894360728183;0.7081991086096;1;-0.5184392598876195;0.8718230172254018;-0.6029011866594205;-0.8538750735644762;0.30548091696595203;0.9580430334649337;1;-0.9232181655545761;0.204762529952361;-0.27597899433629647;-0.4566883482284896;0.005602191256936395;-0.5025156197584244;0.0944349207722226;0.6940823667670719;0.20378188269384512;0.3353749814378135;-0.45386443125696796;0.32837507256273457;-0.6796499496068207;0.13540965196439614;-0.9886538488595285;0.4082942722637539;0.9138329754872903;-0.06659921395222579;-0.017130204872386923;-0.7187387130721035;0.5674556139921905;0.5784345141602225;0.40500771473409825;0.8457409765338764;-0.6727994133380824;-0.46452000346060207;-0.3727352229427745;1;-0.18936570394017394;0.2547991287905771;-0.934755080614124;0.8704334232878894;-0.2683506973771108;-0.24349278114709572;-0.24421453610996346;0.1451602272934398;1;-0.613399368824562;-0.27618327575922264;0.3982706523510051;-0.14571147124227535;-0.6518095753709678;-0.3794878139518829;-0.7224764305125806;-0.9268946189785641;0.5042392090775587;0.27160566430704103;1;-0.19319873430184398;0.11856882442654104;-0.6999236517521907;-0.018608665164944638;0.0004095851937404582;0.18882851259238498;0.5034997236211516;-0.4997800106847521;1;-0.0819006837610401;0.8496881020044758;2.9436094075352415E-05;1;-0.4105657791427073;-0.4487220192126995;-0.42328621288448387;0.4059060858304073;1;0.5487161253171653;0.9425628267315671;0.4241117786144646;0.1384937792372718;-0.8578184729774225;0.2572947270640713;0.07810265716334386;0.5510269099574674;-0.9952488233059011;-0.2734017481189739;-0.09345405944490648;-0.19740219401381598;1;-0.10393841663254877;-0.06804613648701885;1;0.6728566376649006;0.5193728592754063;-0.5514737457357322;0.8737177142815282;1;0.49124799848627654;1;0.3751431276756012;-0.5323003876087333;-0.14712258188463112;1;0.7161726261590946;-0.7454807247845441;-0.2871219803869407;0.8393336264255344;0.03093931327469157;-0.6374479820990036;0.8860629608797566;0.6179216684332942;-0.1858334942365858;0.13171257641185385;-0.6279652081113443;-0.601024112285168;0.46029769998882175;0.24033448402939905;-0.2197218654073405;0.5644080410360284;0.9097588078267702;-0.10768385055771224;-0.07255467117787218;-0.5223984508022514;0.8313595544070596;-0.2415546144501446;0.8057666998572899;-0.9946745685805956;1;0.687103091070705;0.16179610216748275;1;0.3374435401901108;-0.41462238194982803;0.5177759040217533;0.18463281582063384;0.6488342392211757;-0.7163304145871268;-0.6416200128668019;0.6769797755665414;-0.4436093434927706;-0.7785770944747821;0.1947067959505293;-0.9976844417409219;0.11667487224481432;-0.5827918093250692;-0.004030736580180383;-0.7082377821138826;-0.46831972279359446;1;1;-0.8852821769551833;0.6641968823200226;1;0.2527163626374982;0.3974007199839025;-0.966321719056429;-0.05722371876409382;-0.8243300595277567;0.22985652000127588;-0.12057498662805388;0.34145843215148886;0.16717631551326928;0.5522349743096264;1;-0.6043569886961089;0.21637153594537262;1;-0.23108692101156736;-0.809675098590801;-0.13960525716008032;0.33661582419788605;0.02773205991173544;-0.06785140486420049;1;0.8778432081459098;-0.977657442896509;-0.509940441226918;-0.7564716597955596;0.18823964993009557;-0.2904576081285475;0.04104093475777559;-0.16789745082116703;0.8690639458550722;0.14679714904470442;-0.8825533913244441;-0.7198095033924963;0.5845143328746334;0.0647033805662931;1;-0.32112327980903776;-0.7018492872812903;0.06064693879104399;1;0.34538915946730175;-0.6272578422524167;0.3230808410231991;-0.5080415202703439;-0.7637160468915494;-0.07420091580335963;-0.47395988673139233;0.5496890873959703;0.07837601912274605;1;-0.9071509135026341;0.9785187837971985;-0.88003128718783;-0.5534021423079374;0.75510287800963;-0.17977753955279585;0.9396889718041883;-0.8739516536769367;-0.3962718553311626;-0.6949122231770075;-0.12312876554283947;1;-0.27636877939173865;0.40704840576276213;0.8398658048201322;-0.06100467459369674;-0.07310207008252356;-0.5645525216206084;1;-0.014535918343533627;0.7651802213808225;-0.9923037517816578;0.01070542156746046;-0.3797299777596972;-0.6238369368863146;-0.795977805199289;1;-0.35253180104495674;0.5319774550476561;0.6479959033898939;0.10739070694545316;1;-0.624049129616272;-0.8268666911085356;1;0.19836269237764648;-0.4775841382834827;1;-0.6056271325650833;-0.7354676722170697;0.6634580790570093;-0.9432963730855239;0.6341731374982651;-0.5219987751499673;-0.46064716661486815;-0.0016178849503913906;0.5492037358348414;-0.9377976587888512;0.11959705376222485;-0.5770457442236179;-0.5361997288762406;0.5461477017401204;-0.29441655350870377;-0.44455280482412673;-0.13226580968584978;-0.3094176821724901;-0.6963365352577588;-0.6496991300106463;-0.12533711922494528;0.07922434698884806;0.43241123175172524;0.5505660130219665;0.7629214547842218;-0.5691583371330466;1;-0.5354141028799586;1;#
0.20291427228584014;-0.8488587307963771;0.37589313678311953;0.17757846191807736;-0.62703994855166;-0.7723331250032901;0.05815934281578872;0.14944398564423178;-0.1429981568442531;0.43705091229767;0.25464012620181853;0.5284660969919146;0.6646055357905207;0.6724483226199081;0.8175858300692505;0.4976048793906438;-0.2651707348256056;0.7033109183601072;-0.4315924928631609;0.9333729521066734;0.7014654603520847;-0.262427492098706;0.5348963785968697;-0.6024585777981359;0.08977297069670831;-0.5443525124279756;0.8786284237278126;-0.7714236396125593;-0.3391915923629516;0.47864869101623886;-0.7395389509839401;-0.15528473781737762;-0.50492849816224;0.9984373528135877;-0.38932258084415494;-0.7772163749238561;-0.9854838133175434;0.18071737843674174;0.4866205326813764;-0.27249442631110377;-0.6402073858597361;0.7158085236454157;-0.8567529046670377;0.7576087702486172;1;0.8191036236509976;0.14732563190893733;0.08756915864889381;-0.7301422783841574;-0.1933424918241986;0.07733398573245043;-0.8169364835123885;0.1737377613577642;-0.560136501327374;-0.1292098264200776;0.5534184581333943;0.056551385055958026;0.0207774115957986;-0.46240374697563236;0.6986418450359619;-0.4935528681753243;0.6562818795228671;-0.5364754250492909;-0.048192575283742656;-0.8923615823468554;0.35508327575872367;0.7432861618854958;0.06951081199163611;-0.6902472188102555;0.27759746671285157;0.21450095154286708;0.14314843030856106;-0.11099459101368225;0.9145042729811208;0.6207880166213948;0.080494142333432;#
";
}
//Game game = PlayGame();
//MLGame mlGame = AutoPlayGame();



//MLGame AutoPlayGame()
//{
//    var game = new MLGame();

//    DrawMap(game);

//    try
//    {
//        Console.WriteLine();

//        while (true)
//        {
//            game.Decide();
//            game.Tick();
//            Console.SetCursorPosition(0, 0);
//            DrawMap(game);
//            Thread.Sleep(200);
//        }
//    }
//    catch (GameOverException)
//    {
//        Console.Clear();
//        AutoPlayGame();
//    }

//    return game;
//}

//Game PlayGame()
//{
//    var game = new Game();

//    Console.WriteLine();
//    Console.WriteLine("Press any key to start");

//    DrawMap(game);
//    var cancellation = new CancellationTokenSource();

//    try
//    {
//        Console.ReadKey();

//        Task.Run(() =>
//        {
//            while (true)
//            {
//                if (Console.KeyAvailable)
//                {
//                    var readKey = Console.ReadKey();
//                    if (readKey.Key == ConsoleKey.DownArrow)
//                        game.Snake.SetDirection(Direction.Up);
//                    else if (readKey.Key == ConsoleKey.UpArrow)
//                        game.Snake.SetDirection(Direction.Down);
//                    else if (readKey.Key == ConsoleKey.LeftArrow)
//                        game.Snake.SetDirection(Direction.Left);
//                    else if (readKey.Key == ConsoleKey.RightArrow)
//                        game.Snake.SetDirection(Direction.Right);
//                }

//                if (cancellation.IsCancellationRequested)
//                    break;

//                Thread.Sleep(100);
//            }
//        }, cancellation.Token);

//        while (true)
//        {
//            game.Tick();
//            Console.SetCursorPosition(0, 0);
//            Console.WriteLine();
//            Console.WriteLine("                         ");
//            DrawMap(game);
//            Thread.Sleep(200);
//        }
//    }
//    catch (GameOverException)
//    {
//        Console.Clear();
//        cancellation.Cancel();
//        PlayGame();
//    }

//    return game;
//}

void DrawMap(Game game, int offsetX = 0, int offsetY = 0)
{
    Console.SetCursorPosition(offsetX, offsetY);
    for (int i = 0; i < game.Board.Width + 2; i++)
    {
        Console.BackgroundColor = ConsoleColor.White;
        Console.Write("_");
    }
    Console.ForegroundColor = ConsoleColor.White;
    Console.BackgroundColor = ConsoleColor.Black;

    //Console.WriteLine();
    Console.SetCursorPosition(offsetX, offsetY += 1);
    for (int row = 0; row < game.Board.Height; row++)
    {
        Console.BackgroundColor = ConsoleColor.White;
        Console.Write("|");
        for (int column = 0; column < game.Board.Width; column++)
        {
            if (column == game.Snake.HeadPosition.X && row == game.Snake.HeadPosition.Y)
            {
                Console.ForegroundColor = ConsoleColor.Magenta;
                Console.BackgroundColor = ConsoleColor.Magenta;
                Console.Write("p");
            }
            else if (game.Snake.TailPositions.Any(tp => tp.X == column && row == tp.Y))
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.BackgroundColor = ConsoleColor.Red;
                Console.Write("o");
            }
            else if (column == game.Food.X && row == game.Food.Y)
            {
                Console.ForegroundColor = ConsoleColor.Green;
                Console.BackgroundColor = ConsoleColor.Green;
                Console.Write("x");
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.White;
                Console.BackgroundColor = ConsoleColor.Black;
                Console.Write(" ");
            }
            Console.ForegroundColor = ConsoleColor.White;
            Console.BackgroundColor = ConsoleColor.Black;
        }
        Console.BackgroundColor = ConsoleColor.White;
        Console.Write("|");
        Console.ForegroundColor = ConsoleColor.White;
        Console.BackgroundColor = ConsoleColor.Black;
        //Console.WriteLine();
        Console.SetCursorPosition(offsetX, offsetY += 1);
    }
    for (int i = 0; i < game.Board.Width + 2; i++)
    {
        Console.BackgroundColor = ConsoleColor.White;
        Console.Write("-");
    }
    Console.ForegroundColor = ConsoleColor.White;
    Console.BackgroundColor = ConsoleColor.Black;
}

void DrawMaps(List<Game> games)
{
    for (int i = 0; i < 10; i++)
    {
        if (i >= games.Count)
            break;

        var previousGame = i > 0 ? games[i - 1] : null;
        int deltaWidth = previousGame?.Board?.Width + 1 ?? 0;
        int deltaHeight = previousGame?.Board?.Height + 1 ?? 0;
        int heightMultiplier = 0;
        int widthMultiplier = i;
        if (i > 4)
        {
            heightMultiplier = 1;
            widthMultiplier = i - 5;
        }
        DrawMap(games[i], widthMultiplier * deltaWidth, deltaHeight * heightMultiplier);
    }
}

void PlayMultipleGames()
{
    var normalGame = new Game();
    var games = new List<Game> { normalGame, new MLGame(), new MLGame(), new MLGame(),
        new MLGame(), new MLGame(), new MLGame(), new MLGame(), new MLGame(), new MLGame() };
    DrawMaps(games);

    Console.ReadKey();
    var cancellation = new CancellationTokenSource();

    Task.Run(() =>
    {
        while (true)
        {
            if (Console.KeyAvailable)
            {
                var readKey = Console.ReadKey();
                if (readKey.Key == ConsoleKey.DownArrow)
                    normalGame.Snake.SetDirection(Direction.Up);
                else if (readKey.Key == ConsoleKey.UpArrow)
                    normalGame.Snake.SetDirection(Direction.Down);
                else if (readKey.Key == ConsoleKey.LeftArrow)
                    normalGame.Snake.SetDirection(Direction.Left);
                else if (readKey.Key == ConsoleKey.RightArrow)
                    normalGame.Snake.SetDirection(Direction.Right);
            }

            if (cancellation.IsCancellationRequested)
                break;

            Thread.Sleep(100);
        }
    }, cancellation.Token);


    while (true)
    {
        foreach (var game in games)
        {
            try
            {
                if (game is MLGame mlGame)
                    mlGame.Decide();
                game.Tick();
            }
            catch (GameOverException)
            {
                if (game == normalGame)
                    cancellation.Cancel();
            }
        }
        DrawMaps(games);
        Thread.Sleep(200);

        if (games.All(g => !g.Snake.Alive))
        {
            cancellation.Cancel();
            PlayMultipleGames();
        }
    }
}